==================== Comparing Objects =================
In Java, comparing objects is a fundamental task that involves checking
if two objects are considered equal.
This can be done using the == operator and the .equals() method.

Using == Operator:

The == operator checks if two object references point to the same memory location.
This is a reference comparison, not a content comparison.


rectangle  => lenght , width
	   => contructors , setters and getters
	   => compare , display , calcArea
what will happen if you compared objectOne with ObjectTwo
if(x==y)

after that make => x=y
then test if(x==y) ==> output true
then modify by yObject in the xObject and see the result:
----------------------------------------------------------
======================= Copying Object==============


Reference only copy:
This is simply copying the address of an object into another reference variable;

Deep Copy:
This involves creating a new instance of the class and copying the
 values from one object into the new Object


create Car class:
	=> parameterized constructor
	=> copy constructor
	=>create method to copy the object with its values
	=>create method for calculating Area , and methods for displaying
	After that
	Take object in the main method and copy more than one object







  public Rectangle(Rectangle ObjectThatContainsValuesAndYouWantToCopyFrom){
        this.width=ObjectThatContainsValuesAndYouWantToCopyFrom.width;
        this.length=ObjectThatContainsValuesAndYouWantToCopyFrom.length;
    }

    // Method for copying
    public Rectangle copy(){
        return new Rectangle(this.length,this.width);
    }
------------------------------------------
Copying objects in Java involves creating a new object that is a duplicate of an existing object.
 There are two primary ways to copy objects:
Shallow Copy:

A shallow copy creates a new instance of the object and copies all the fields to the new instance.
For fields that are primitive types or immutable objects (like String), this works as expected.
However, for fields that are references to other objects, only the references are copied,
not the objects themselve:

public class Rectangle {
    private double length;
    private double width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    // Shallow copy method
    public Rectangle shallowCopy() {
        return new Rectangle(this.length, this.width);
    }
}


Deep Copy:
A deep copy creates a new instance of the object and also recursively copies
all objects referenced by the fields.
This ensures that the new object is entirely independent of the original object.

------------------------------------------

Reference only copy:
This is simply copying the address of an object into another reference variable;

Deep Copy:
This involves creating a new instance of the class and copying the
 values from one object into the new Object

create Rectangle class:
	=> parameterized constructor
	=> copy constructor
	=>create method to copy the object with its values
	=>create method for calculating Area , and methods for displaying
	After that
	Take object in the main method and copy more than one object


---------------------------------------------------------

public class Product {
    // Attributes
    private double price;
    private double weight;

    // Constructor
    public Product(double price, double weight) {
        this.price = price;
        this.weight = weight;
    }

    // Getter for price
    public double getPrice() {
        return price;
    }

    // Getter for weight
    public double getWeight() {
        return weight;
    }

    // Method to compare two Product objects
    public boolean equals(Product other) {
        if (other == null) {
            return false;
        }
        return this.price == other.price && this.weight == other.weight;
    }

    // Method to display product details
    public void displayProductDetails() {
        System.out.println("Price: $" + price);
        System.out.println("Weight: " + weight + " kg");
    }

    // Main method for testing
    public static void main(String[] args) {
        Product product1 = new Product(50.0, 2.5);
        Product product2 = new Product(50.0, 2.5);
        Product product3 = new Product(35.0, 1.8);

        // Compare product1 and product2
        if (product1.equals(product2)) {
            System.out.println("Product 1 is equal to Product 2");
        } else {
            System.out.println("Product 1 is not equal to Product 2");
        }

        // Compare product1 and product3
        if (product1.equals(product3)) {
            System.out.println("Product 1 is equal to Product 3");
        } else {
            System.out.println("Product 1 is not equal to Product 3");
        }
    }
}
=================================================

public class Rectangle {
    // Attributes
    private double length;
    private double width;

    // Constructor
    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    // Copy constructor
    public Rectangle(Rectangle other) {
        this.length = other.length;
        this.width = other.width;
    }

    // Method to create a copy of the rectangle
    public Rectangle copy() {
        return new Rectangle(this.length, this.width);
    }

    // Getter for length
    public double getLength() {
        return length;
    }

    // Getter for width
    public double getWidth() {
        return width;
    }

    // Setter for length
    public void setLength(double length) {
        if (length > 0) {
            this.length = length;
        }
    }

    // Setter for width
    public void setWidth(double width) {
        if (width > 0) {
            this.width = width;
        }
    }

    // Method to calculate area
    public double calculateArea() {
        return length * width;
    }

    // Method to display rectangle details
    public void displayDetails() {
        System.out.println("Length: " + length + ", Width: " + width + ", Area: " + calculateArea());
    }

    // Main method for testing
    public static void main(String[] args) {
        Rectangle rect1 = new Rectangle(5.0, 3.0);
        rect1.displayDetails();

        // Using copy constructor
        Rectangle rect2 = new Rectangle(rect1);
        rect2.displayDetails();

        // Using copy method
        Rectangle rect3 = rect1.copy();
        rect3.displayDetails();
    }
}
